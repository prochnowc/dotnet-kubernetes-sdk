// <auto-generated>
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#nullable enable

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Kubernetes.Models;
using Kubernetes.Client;
using Kubernetes.Client.Http;

namespace Kubernetes.Client.Operations;

{{ operationsTypeName = Model.Name | string.append "Operations" -}}

/// <summary>
/// Provides the operations for the {{ Model.Name }} endpoints.
/// </summary>
public sealed partial class {{ operationsTypeName }} : KubernetesClientOperations
{
    internal {{ operationsTypeName }}(KubernetesClient client)
        : base(client)
    {
    }

    {{~ for method in Model.Methods ~}}
    {{ method.Description | xml_doc "summary" ~}}
    {{~ for parameter in method.AllParameters ~}}
    {{~ parameterName = parameter.ParameterName | string.remove_first "@" ~}}
    {{ parameter.Description | xml_doc "param" $'name="{parameterName}"' ~}}
    {{~ end ~}}
    /// <param name="cancellationToken">Optional <see cref="CancellationToken" /> which can be used to cancel the request.</param>
    public async {{ method | dotnet_async_return_type }} {{ method.Name }}Async{{ if Model.Name == "CustomObjects" }}<T>{{ end }}(
        {{ method | dotnet_format_async_parameters }})
    {{- if Model.Name == "CustomObjects" }}
        where T : IKubernetesObject
    {{- end }}
    {
        {{- if Model.Name == "CustomObjects" }}
        KubernetesEntityType entityType = KubernetesEntityType.FromType<T>();
        string requestUriTemplate = string.IsNullOrEmpty(entityType.Group)
            ? "{{ method.Path | string.replace "apis/{group}/" "api/" }}"
            : "{{ method.Path }}";
        {{- else }}
        string requestUriTemplate = "{{ method.Path }}";
        {{- end }}

        var requestUri = new RequestUriBuilder(requestUriTemplate)
        {{- if Model.Name == "CustomObjects" }}
            .AddPathParameter("group", entityType.Group)
            .AddPathParameter("version", entityType.Version)
            .AddPathParameter("plural", entityType.Plural)
        {{- end }}
        {{~ for parameter in method.PathParameters ~}}
            .AddPathParameter("{{ parameter.Name }}", {{ parameter.ParameterName }})
        {{~ end ~}}
        {{~ for parameter in method.QueryParameters ~}}
            .AddQueryParameter("{{ parameter.Name }}", {{ parameter.ParameterName }})
        {{~ end ~}}
        {{~ if method.Action == "WATCH" ~}}
            .AddQueryParameter("watch", true)
        {{~ end ~}}
            .ToUri();

        var request = new KubernetesRequest(HttpMethods.{{ method.Method }}, requestUri);
        request.Action = "{{ method.Action }}";
        {{~ if method.GroupVersionKind ~}}
        {{~ if (method.GroupVersionKind.Group | string.empty) ~}}
        request.ApiVersion = "{{ method.GroupVersionKind.Version }}";
        {{~ else ~}}
        request.ApiVersion = "{{ method.GroupVersionKind.Group }}/{{ method.GroupVersionKind.Version }}";
        {{~ end ~}}
        request.Kind = "{{ method.GroupVersionKind.Kind }}";
        {{~ else if Model.Name == "CustomObjects" }}
        request.ApiVersion = string.IsNullOrEmpty(entityType.Group)
            ? entityType.Version
            : $"{entityType.Group}/{entityType.Version}";
        request.Kind = entityType.Kind;
        {{~ end ~}}

        {{~ if method.Body != null ~}}
        request.Content = {{ method.Body.ParameterName }};
        {{~ end ~}}
        {{~ if method.Action == "WATCH" ~}}
        request.Timeout = Timeout.InfiniteTimeSpan;
        {{~ end ~}}

        using var response = await Client.SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        {{ if method.Action == "WATCH" -}}
        return await response.ReadAsWatcherAsync<{{ method.ResultType }}>(cancellationToken)
            .ConfigureAwait(false);
        {{- else if method.ResultType == "global::System.IO.Stream" -}}
        return await response.ReadAsStreamAsync(cancellationToken)
            .ConfigureAwait(false);
        {{- else if method.ResultType != "void" -}}
        return await response.ReadAsContentAsync<{{ method.ResultType }}>(cancellationToken)
            .ConfigureAwait(false);
        {{- end }}
    }
    {{~ if !for.last ~}}

    {{~ end ~}}
    {{~ end ~}}
}
